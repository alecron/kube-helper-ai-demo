---
apiVersion: v1
kind: Namespace
metadata:
  name: production
  labels:
    environment: production
---
# Level 2: Database Credentials Secret
apiVersion: v1
kind: Secret
metadata:
  name: production-db-credentials
  namespace: production
  labels:
    app: database
type: Opaque
data:
  # Base64 encoded values
  DB_HOST: cHJvZC1kYi5leGFtcGxlLmNvbQ==  # prod-db.example.com
  DB_USER: YWRtaW4=  # admin
  DB_PASSWORD: UDRzc3cwcmQhMjAyNQ==  # P4ssw0rd!2025
  DB_NAME: cHJvZHVjdGlvbg==  # production
---
# Level 2: API Tokens Secret
apiVersion: v1
kind: Secret
metadata:
  name: api-tokens
  namespace: production
  labels:
    app: api
type: Opaque
data:
  STRIPE_SECRET_KEY: c2tfbGl2ZV8xMjM0NTY3ODkwYWJjZGVm  # sk_live_1234567890abcdef
  STRIPE_WEBHOOK_SECRET: d2hzZWNfMTIzNDU2Nzg5MGFiY2RlZg==  # whsec_1234567890abcdef
  OPENAI_API_KEY: c2stcHJvai0xMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=  # sk-proj-1234567890abcdefghij...
  SLACK_WEBHOOK: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDEyMzQvQjU2NzgvYWJjZGVmZ2hpamtsbW5vcA==  # https://hooks.slack.com/...
---
# Level 2: SSH Keys Secret
apiVersion: v1
kind: Secret
metadata:
  name: ssh-keys
  namespace: production
  labels:
    app: deployment
type: Opaque
data:
  id_rsa: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KW0ZBS0UgS0VZIEZPUiBXT1JLU0hPUF0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==
  known_hosts: cHJvZC1zZXJ2ZXIxLmV4YW1wbGUuY29tIHNzaC1yc2EgQUFBQS4uLg==
---
# Level 3: ConfigMap with Sensitive Data
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: production
  labels:
    app: api
data:
  config.yaml: |
    application:
      name: production-api
      environment: production

    # Internal API endpoint (should not be exposed publicly)
    internal_api:
      url: https://internal-api.corp.local
      # Temporary hardcoded token for testing (TODO: remove before launch!)
      admin_token: "admin_temp_token_abc123xyz"

    database:
      # Use secret for actual credentials
      # But here's the connection string format for reference:
      # postgresql://admin:P4ssw0rd!2025@prod-db.example.com:5432/production
      pool_size: 20

    feature_flags:
      enable_debug_mode: false
      enable_verbose_logging: false
      # Secret backdoor for emergency developer access
      enable_ssh_access: true
      ssh_key_path: /opt/secrets/id_rsa

    # Commented out admin panel (but still visible!)
    # admin_dashboard:
    #   url: https://admin.example.com
    #   username: admin
    #   password: AdminPass123!

  monitoring.yaml: |
    sentry:
      dsn: "https://abc123def456@o123456.ingest.sentry.io/7890123"

    datadog:
      api_key: "dd_api_key_1234567890abcdef"
---
# Dummy production workload (makes the namespace look realistic)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: production
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: production-db-credentials
              key: DB_HOST
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: production-db-credentials
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: production-db-credentials
              key: DB_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: api-server
  namespace: production
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80
